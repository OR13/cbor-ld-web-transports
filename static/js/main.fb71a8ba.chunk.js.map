{"version":3,"sources":["QrApp.js","App.js","reportWebVitals.js","index.js","common.js","documentLoader.js","NfcApp.js"],"names":["QrApp","React","useState","state","setState","useEffect","base32EncodedCborLd","a","jsonLdToBase32CborLd","jsonldDocument","handleScan","data","base32CborLdToJson","scannedQrCode","className","Grid","container","spacing","item","xs","sm","delay","onScan","onError","e","console","error","style","maxWidth","logo","image","window","location","fgColor","height","width","ecLevel","JSON","stringify","App","NfcApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","buf2hex","buffer","Array","prototype","map","call","Uint8Array","x","toString","slice","join","id","json","encode","documentLoader","cborldBytes","base32Encode","replace","decodedCborLdBytes","from","Buffer","base32Decode","decode","decodedCborLd","iri","startsWith","axios","get","resp","documentUrl","Error","readFromTag","variant","color","onClick","NDEFReader","writer","jsonRecord","recordType","mediaType","write","records","res","reader","scan","log","onerror","onreading","event","parsedRecords","message","record","push"],"mappings":"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","file":"static/js/main.fb71a8ba.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { QR } from \"@bloomprotocol/qr-react\";\nimport QrReader from \"react-qr-reader\";\n\nimport {\n  jsonldDocument,\n  jsonLdToBase32CborLd,\n  base32CborLdToJson,\n} from \"./common\";\n\nexport const QrApp = () => {\n  const [state, setState] = React.useState({});\n\n  React.useEffect(() => {\n    if (!state.base32EncodedCborLd) {\n      (async () => {\n        const base32EncodedCborLd = await jsonLdToBase32CborLd(jsonldDocument);\n        // const decodedCborLd = await base32CborLdToJson(base32EncodedCborLd);\n        setState({\n          jsonldDocument,\n          base32EncodedCborLd,\n          // scannedQrCode: decodedCborLd,\n        });\n      })();\n    }\n  });\n\n  const handleScan = async (data) => {\n    if (data) {\n      setState({\n        ...state,\n        scannedQrCode: await base32CborLdToJson(data),\n      });\n    }\n  };\n\n  let blockSize = 512;\n  return (\n    <div className=\"App\">\n      <Grid container spacing={8}>\n        <Grid item xs={12}>\n          <h3>CBOR-LD</h3>\n          <p>\n            {!state.scannedQrCode\n              ? \"Use a mirror to scan the QR Code.\"\n              : \"Decoded CBOR-LD.\"}\n          </p>\n        </Grid>\n        {!state.scannedQrCode && (\n          <Grid item xs={12} sm={6}>\n            <QrReader\n              delay={300}\n              onScan={handleScan}\n              onError={(e) => {\n                console.error(e);\n              }}\n              style={{ maxWidth: `${blockSize}px` }}\n            />\n          </Grid>\n        )}\n        <Grid item sm={6}>\n          <QR\n            data={state.base32EncodedCborLd || \"\"}\n            logo={{ image: window.location + \"/logo192.png\" }}\n            fgColor={\"#594aa8\"}\n            height={blockSize}\n            width={blockSize}\n            ecLevel={\"M\"}\n          />\n        </Grid>\n        {state.scannedQrCode && (\n          <Grid item sm={6}>\n            <pre>{JSON.stringify(state.scannedQrCode, null, 2)}</pre>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QrApp } from \"./QrApp\";\nimport { NfcApp } from \"./NfcApp\";\nfunction App() {\n  return (\n    <>\n      <QrApp />\n      <NfcApp />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { encode, decode } from \"@digitalbazaar/cborld\";\n\nimport { documentLoader } from \"./documentLoader\";\n\nimport base32Encode from \"base32-encode\";\nimport base32Decode from \"base32-decode\";\n\nexport function buf2hex(buffer) {\n  // buffer is an ArrayBuffer\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), (x) => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n\nexport const jsonldDocument = {\n  \"@context\": [\"https://www.w3.org/ns/did/v1\"],\n  id: \"did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n};\n\nexport const jsonLdToBase32CborLd = async (json) => {\n  const cborldBytes = await encode({ jsonldDocument: json, documentLoader });\n  const base32EncodedCborLd = base32Encode(cborldBytes, \"RFC4648\").replace(\n    /=/g,\n    \"\"\n  );\n  return base32EncodedCborLd;\n};\n\nexport const base32CborLdToJson = async (base32EncodedCborLd) => {\n  const decodedCborLdBytes = Uint8Array.from(\n    Buffer.from(base32Decode(base32EncodedCborLd, \"RFC4648\"))\n  );\n  const decodedCborLd = await decode({\n    cborldBytes: decodedCborLdBytes,\n    documentLoader,\n  });\n  return decodedCborLd;\n};\n","import axios from \"axios\";\n\nexport const documentLoader = async (iri) => {\n  if (iri.startsWith(\"http\")) {\n    const resp = await axios.get(iri);\n    return {\n      documentUrl: iri,\n      document: resp.data,\n    };\n  }\n  console.error(iri);\n  throw new Error(\"unsupported iri \" + iri);\n};\n","import React from \"react\";\nimport { Grid, Button } from \"@material-ui/core\";\n\nimport {\n  jsonldDocument,\n  jsonLdToBase32CborLd,\n  base32CborLdToJson,\n  buf2hex,\n} from \"./common\";\n\nexport const NfcApp = () => {\n  const [state, setState] = React.useState({});\n\n  React.useEffect(() => {\n    if (!state.base32EncodedCborLd) {\n      (async () => {\n        const base32EncodedCborLd = await jsonLdToBase32CborLd(jsonldDocument);\n        // const decodedCborLd = await base32CborLdToJson(base32EncodedCborLd);\n        setState({\n          ...state,\n          jsonldDocument,\n          base32EncodedCborLd,\n          // readFromTag: decodedCborLd,\n        });\n      })();\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={8}>\n        <Grid item xs={12}>\n          <h3>Web NFC</h3>\n          <p>Web NFC is not supported by Apple.</p>\n          <p>\n            {!state.readFromTag\n              ? \"Click Write and hold an NDEF compatible NFC Tag next to your phone.\"\n              : \"Decoded CBOR-LD from NFC Tag using Web NFC!\"}\n          </p>\n        </Grid>\n        {!state.readFromTag && (\n          <Grid item xs={12} sm={6}>\n            <Button\n              variant={\"contained\"}\n              color={\"primary\"}\n              onClick={async () => {\n                if (\"NDEFReader\" in window) {\n                  const { NDEFReader } = window;\n                  const writer = new NDEFReader();\n\n                  const jsonRecord = {\n                    recordType: \"mime\",\n                    mediaType: \"application/ld+cbor\",\n                    data: Buffer.from(state.base32EncodedCborLd),\n                  };\n                  const res = await writer.write({\n                    records: [jsonRecord],\n                  });\n                  setState({ res, write: true });\n                }\n              }}\n            >\n              Write\n            </Button>\n          </Grid>\n        )}\n        <Grid item sm={6}>\n          <Button\n            variant={\"contained\"}\n            color={\"primary\"}\n            onClick={async () => {\n              if (\"NDEFReader\" in window) {\n                const { NDEFReader } = window;\n                /* Scan NFC tags */\n                const reader = new NDEFReader();\n                reader.scan().then(() => {\n                  console.log(\"Scan started successfully.\");\n                  reader.onerror = () => {\n                    console.log(\n                      \"Cannot read data from the NFC tag. Try another one?\"\n                    );\n                  };\n                  reader.onreading = async (event) => {\n                    let parsedRecords = [];\n                    for (const record of event.message.records) {\n                      console.log(\"Record type:  \" + record.recordType);\n                      console.log(\"MIME type:    \" + record.mediaType);\n                      console.log(\"Record id:    \" + record.id);\n                      console.log(\"Record data:    \" + record.data);\n                      if (record.mediaType === \"application/ld+cbor\") {\n                        parsedRecords.push({\n                          id: record.id,\n                          recordType: record.recordType,\n                          mediaType: record.mediaType,\n                          data: await base32CborLdToJson(\n                            Buffer.from(\n                              buf2hex(record.data.buffer),\n                              \"hex\"\n                            ).toString(\"utf8\")\n                          ),\n                        });\n                      }\n                    }\n                    setState({ readFromTag: parsedRecords });\n                  };\n                });\n              }\n            }}\n          >\n            Read\n          </Button>\n        </Grid>\n        {state.readFromTag && (\n          <Grid item sm={6}>\n            <pre>{JSON.stringify(state.readFromTag, null, 2)}</pre>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n"],"sourceRoot":""}