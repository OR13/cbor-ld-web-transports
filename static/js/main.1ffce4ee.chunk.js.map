{"version":3,"sources":["documentLoader.js","App.js","reportWebVitals.js","index.js"],"names":["documentLoader","iri","a","startsWith","axios","get","resp","documentUrl","document","data","console","error","Error","jsonldDocument","id","jsonLdToBase32CborLd","json","encode","cborldBytes","base32EncodedCborLd","base32Encode","replace","base32CborLdToJson","decodedCborLdBytes","Uint8Array","from","Buffer","base32Decode","decode","decodedCborLd","App","React","useState","state","setState","useEffect","handleScan","scannedQrCode","className","container","spacing","item","xs","sm","delay","onScan","onError","e","style","maxWidth","logo","image","window","location","fgColor","height","width","ecLevel","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qNAEaA,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,0DACxBD,EAAIE,WAAW,QADS,gCAEPC,IAAMC,IAAIJ,GAFH,cAEpBK,EAFoB,yBAGnB,CACLC,YAAaN,EACbO,SAAUF,EAAKG,OALS,aAQ5BC,QAAQC,MAAMV,GACR,IAAIW,MAAM,mBAAqBX,GATT,2CAAH,uD,gMCSrBY,EAAiB,CACrB,WAAY,CAAC,gCACbC,GAAI,4DAGAC,EAAoB,uCAAG,WAAOC,GAAP,iBAAAd,EAAA,sEACDe,YAAO,CAAEJ,eAAgBG,EAAMhB,qBAD9B,cACrBkB,EADqB,OAErBC,EAAsBC,IAAaF,EAAa,WAAWG,QAC/D,KACA,IAJyB,kBAMpBF,GANoB,2CAAH,sDASpBG,EAAkB,uCAAG,WAAOH,GAAP,iBAAAjB,EAAA,6DACnBqB,EAAqBC,WAAWC,KACpCC,EAAOD,KAAKE,IAAaR,EAAqB,aAFvB,SAIGS,YAAO,CACjCV,YAAaK,EACbvB,qBANuB,cAInB6B,EAJmB,yBAQlBA,GARkB,2CAAH,sDAiFTC,IAtEf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,KAGbH,IAAMI,WAAU,WACTF,EAAMd,qBACT,sBAAC,4BAAAjB,EAAA,sEACmCa,EAAqBF,GADxD,OACOM,EADP,OAGCe,EAAS,CACPrB,iBACAM,wBALH,0CAAD,MAYJ,IAAMiB,EAAU,uCAAG,WAAO3B,GAAP,SAAAP,EAAA,0DACbO,EADa,6BAEfyB,EAFe,6BAGVD,GAHU,iBAIQX,EAAmBb,GAJ3B,yBAIb4B,cAJa,+FAAH,sDAUhB,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACE,yCACA,4BACIT,EAAMI,cAEJ,mBADA,0CAINJ,EAAMI,eACN,cAAC,IAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,CACEC,MAAO,IACPC,OAAQT,EACRU,QAAS,SAACC,GACRrC,QAAQC,MAAMoC,IAEhBC,MAAO,CAAEC,SAAS,GAAD,OApBb,IAoBa,WAIvB,cAAC,IAAD,CAAMR,MAAI,EAACE,GAAI,EAAf,SACE,cAAC,IAAD,CACElC,KAAMwB,EAAMd,qBAAuB,GACnC+B,KAAM,CAAEC,MAAOC,OAAOC,SAAW,gBACjCC,QAAS,UACTC,OA7BM,IA8BNC,MA9BM,IA+BNC,QAAS,QAGZxB,EAAMI,eACL,cAAC,IAAD,CAAMI,MAAI,EAACE,GAAI,EAAf,SACE,8BAAMe,KAAKC,UAAU1B,EAAMI,cAAe,KAAM,e,0ICtF7CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzC,EAAA,EAAD,MAEFtB,SAASgE,eAAe,SAM1BZ,M","file":"static/js/main.1ffce4ee.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const documentLoader = async (iri) => {\n  if (iri.startsWith(\"http\")) {\n    const resp = await axios.get(iri);\n    return {\n      documentUrl: iri,\n      document: resp.data,\n    };\n  }\n  console.error(iri);\n  throw new Error(\"unsupported iri \" + iri);\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { encode, decode } from \"@digitalbazaar/cborld\";\nimport { QR } from \"@bloomprotocol/qr-react\";\nimport QrReader from \"react-qr-reader\";\n\nimport { documentLoader } from \"./documentLoader\";\n\nimport base32Encode from \"base32-encode\";\nimport base32Decode from \"base32-decode\";\n\nconst jsonldDocument = {\n  \"@context\": [\"https://www.w3.org/ns/did/v1\"],\n  id: \"did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n};\n\nconst jsonLdToBase32CborLd = async (json) => {\n  const cborldBytes = await encode({ jsonldDocument: json, documentLoader });\n  const base32EncodedCborLd = base32Encode(cborldBytes, \"RFC4648\").replace(\n    /=/g,\n    \"\"\n  );\n  return base32EncodedCborLd;\n};\n\nconst base32CborLdToJson = async (base32EncodedCborLd) => {\n  const decodedCborLdBytes = Uint8Array.from(\n    Buffer.from(base32Decode(base32EncodedCborLd, \"RFC4648\"))\n  );\n  const decodedCborLd = await decode({\n    cborldBytes: decodedCborLdBytes,\n    documentLoader,\n  });\n  return decodedCborLd;\n};\n\nfunction App() {\n  const [state, setState] = React.useState({});\n\n  React.useEffect(() => {\n    if (!state.base32EncodedCborLd) {\n      (async () => {\n        const base32EncodedCborLd = await jsonLdToBase32CborLd(jsonldDocument);\n        // const decodedCborLd = await base32CborLdToJson(base32EncodedCborLd);\n        setState({\n          jsonldDocument,\n          base32EncodedCborLd,\n          // scannedQrCode: decodedCborLd,\n        });\n      })();\n    }\n  });\n\n  const handleScan = async (data) => {\n    if (data) {\n      setState({\n        ...state,\n        scannedQrCode: await base32CborLdToJson(data),\n      });\n    }\n  };\n\n  let blockSize = 512;\n  return (\n    <div className=\"App\">\n      <Grid container spacing={8}>\n        <Grid item xs={12}>\n          <h3>CBOR-LD</h3>\n          <p>\n            {!state.scannedQrCode\n              ? \"Use a mirror to scan the QR Code.\"\n              : \"Decoded CBOR-LD.\"}\n          </p>\n        </Grid>\n        {!state.scannedQrCode && (\n          <Grid item xs={12} sm={6}>\n            <QrReader\n              delay={300}\n              onScan={handleScan}\n              onError={(e) => {\n                console.error(e);\n              }}\n              style={{ maxWidth: `${blockSize}px` }}\n            />\n          </Grid>\n        )}\n        <Grid item sm={6}>\n          <QR\n            data={state.base32EncodedCborLd || \"\"}\n            logo={{ image: window.location + \"/logo192.png\" }}\n            fgColor={\"#594aa8\"}\n            height={blockSize}\n            width={blockSize}\n            ecLevel={\"M\"}\n          />\n        </Grid>\n        {state.scannedQrCode && (\n          <Grid item sm={6}>\n            <pre>{JSON.stringify(state.scannedQrCode, null, 2)}</pre>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}